---
description: 
globs: 
alwaysApply: true
---
# Pull Request & Code Review Standards

These standards ensure consistency, quality, and professional communication across all code contributions.

## 1. Pull Request Format

### Title Convention
Follow the Conventional Commits format:
```
<type>(<scope>): <description>

Examples:
feat(components): add new Button component with variants
fix(tests): resolve Jest configuration issues
docs(storybook): update component documentation
refactor(utils): improve type safety in utility functions
```

### Description Template
Use this structure for all PR descriptions:

- **Changes Made**: Bullet points of what was changed
- **Technical Details**: Files modified, dependencies, breaking changes
- **Testing**: Unit/E2E tests status and coverage info
- **Impact**: Performance, bundle size, accessibility changes
- **Checklist**: Style guidelines, review, comments, docs, tests

### Required Labels
Apply appropriate labels:
- `type:feat`, `type:fix`, `type:docs`, `type:refactor`, `type:test`, `type:chore`
- `priority:high`, `priority:medium`, `priority:low`

## 2. Code Review Guidelines

### Review Types & Templates

#### ✅ Approval Review
```markdown
## ✅ LGTM! Excellent work

### 🎯 Highlights
- **Quality**: [Specific quality aspects that stood out]
- **Implementation**: [What was implemented well]
- **Testing**: [Testing quality remarks]

### 💡 Minor Suggestions (Optional)
- Consider [suggestion] for future improvement

**Approved!** 🚀
```

#### 🔄 Changes Requested Review
```markdown
## 🔄 Changes Requested

### ⚠️ Must Fix
1. **[Critical Issue]**: Description
   - **Location**: `file.tsx:line`
   - **Problem**: What's wrong
   - **Solution**: Suggested fix

### 💡 Suggestions
1. **[Improvement]**: Description
   - **Current**: What it is now
   - **Suggested**: What it could be
   - **Benefit**: Why this would be better

### 🎯 Positive Feedback
- [Something that was done well]

Great work overall! Looking forward to the updates. 👍
```

## 3. Review Process

### For Reviewers
**What to Look For:**
1. **Code Quality**: Style guidelines, readability, TypeScript usage
2. **Functionality**: Meets requirements, handles edge cases, no bugs
3. **Testing**: Adequate coverage, meaningful tests, E2E for critical paths
4. **Documentation**: TSDoc comments, Storybook stories, README updates

**Response Times:**
- Critical fixes: Within 4 hours
- Regular features: Within 24 hours
- Documentation: Within 48 hours

### For PR Authors
**Before Requesting Review:**
- [ ] Self-review completed
- [ ] All tests passing (`npm run test:coverage`, `npm run test:e2e`)
- [ ] No lint errors (`npm run lint`)
- [ ] Description complete and accurate
- [ ] Screenshots for UI changes

**Responding to Reviews:**
- Address all "Must Fix" items
- Respond to suggestions with implementation or explanation
- Thank reviewers for feedback
- Re-request review after changes

## 4. Testing Requirements

### Test Structure
Tests are centralized in `tests/` directory:
```
tests/
├── unit/
│   └── components/
│       ├── component-name.test.tsx    # Custom components only
│       └── ui/                        # AVOID: shadcn components
└── e2e/
    └── component-name.spec.ts
```

### Coverage Requirements
- **100% coverage** required for custom components
- **NO tests** for `src/components/ui/` (shadcn components)
- **Focus** on business logic and custom functionality

## 5. Special Cases

### Emergency Hotfixes
```markdown
## 🚨 HOTFIX: Brief Description

### 🔥 Critical Issue
**Problem**: [What's broken in production]
**Impact**: [How users are affected]

### 🛠️ Fix Applied
**Solution**: [What was done]
**Testing**: [How verified]

**Requires immediate merge for production stability**
```

### Large Features
For complex features:
- Break into smaller PRs when possible
- Include architecture overview
- Suggest review order for reviewers
- Document new patterns introduced

## 6. Automation Integration

### Required Checks
All PRs must pass:
- [ ] Unit tests (Jest)
- [ ] E2E tests (Playwright)
- [ ] Linting (Biome)
- [ ] Type checking (TypeScript)
- [ ] Build success

### Branch Protection
- `main` and `development` branches require:
  - Up-to-date with base branch
  - Status checks passing
  - At least 1 approving review
  - No stale reviews after updates

---

*These standards ensure consistent, high-quality code reviews that maintain code quality while fostering collaborative development.*
